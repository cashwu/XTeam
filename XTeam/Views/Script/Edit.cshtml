@model XTeam.Models.Scripts

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <input id="Id" name="Id" type="hidden" v-model="Id" />

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input id="Name" name="Name" type="text" class="form-control" v-model="name">
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SqlCommand, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <textarea id="sqlCommand" class="form-control input-lg" rows="10">@Model.SqlCommand</textarea>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" value="Save" class="btn btn-default" v-on:click="onSubmit" />
            </div>
        </div>
    </div>
}

<div>
    <a href="@Url.Action("Index", "Script")" class="btn btn-primary">Back to List</a>
</div>

@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/codemirror")

    <script>

        var app = new Vue({
            el: '#app',
            mounted: function () {

                window.editor = window.editor || {};

                var sqlcmd = document.getElementById("sqlCommand");

                window.editor = CodeMirror.fromTextArea(sqlcmd,
                {
                    mode: "text/x-mssql",
                    indentWithTabs: true,
                    smartIndent: true,
                    lineNumbers: true,
                    lineWrapping: true,
                    matchBrackets: true,
                    autofocus: false,
                    readOnly: false,
                    firstLineNumber: 1,
                    extraKeys: { "Tab": "autocomplete" }, // To invoke the auto complete
                    hint: CodeMirror.hint.sql,
                    hintOptions: {
                        tables: {

                        }
                    }
                });

                window.editor.setOption("theme", "default");
                window.editor.refresh();
            },
            data: {
                name: "@Model.Name",
                Id: "@Model.Id"
            },
            methods: {
                onSubmit: function () {

                    if ($.trim(this.name) === ""
                        || this.sqlCommand === "") {
                        alert("Input is not valid !!");
                        return;
                    }

                    var data = {
                        Id: this.Id,
                        Name: this.name,
                        SqlCommand: this.sqlCommand,
                        __RequestVerificationToken: this.token
                    };

                    this.AjaxPost(data);
                },
                AjaxPost: function (data) {
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("Edit", "Script")",
                        data: data,
                        dataType: "json",
                        success: function (response) {
                            alert(response.Message);
                        }
                    });
                }
            },
            computed: {
                sqlCommand: function () {
                    var val = window.editor.getValue();
                    return $.trim(val);
                },
                token: function () {
                    return $("input[name='__RequestVerificationToken']").val();
                }
            }
        });

    </script>
}
